using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using ReChord;

module Program
{
  Main(args : array[string]) : void
  {
    def canParse(s : string) : bool
    {
      mutable i : int;
      int.TryParse(s, out i)
    }
    def ParseInputAndOffsets(args : array[string])
    {
      mutable i = 0;
      def input = 
        if (args.Length > 0 && canParse(args[0]))
          Console.In;
        else
        {
          i = 1;
          System.IO.File.OpenText(args[0])
        }
      def offsets = List.[int]();
      for(; i < args.Length; i++)
      {
        mutable offset : int;
        when(int.TryParse(args[i], out offset))
          offsets.Add(offset)
      }
      when (offsets.Count == 0)
        offsets.Add(0);
      (input, offsets)
    }
    
    def inputAndOffsets = ParseInputAndOffsets(args);
    def input = inputAndOffsets[0];
    def offsets = inputAndOffsets[1];
    def rdr = SimpleLineReader(input);
    
    def lines = Translate(offsets, ReadLines(rdr).ToList());
    OutputHtml(lines);
  }
  
  ReadLines(reader : SimpleLineReader) : IEnumerable.[Line]
  {
    while (reader.Read())
      yield reader.Current;
  }
  
  Translate(offsets : IEnumerable.[int], lines : IEnumerable.[Line]) : IDictionary.[int,IEnumerable.[Line]]
  {
    offsets.ToDictionary(offset => offset, offset => Translate(offset, lines));
  }
  
  Translate(offsetHalfSteps : int, lines : IEnumerable.[Line]) : IEnumerable.[Line]
  {
    foreach(line in lines)
    {
      | chords is Line.Chords =>
        yield Translate(offsetHalfSteps, chords)
      | _ => yield line
    }
  }
  
  Translate(offsetHalfSteps : int, chords : Line.Chords) : Line.Chords
  {
    def newLine = ChordReplacer(chords.Text).Replace(Transposer(offsetHalfSteps).Transpose);
    Line.Chords(newLine);
  }
  
  OutputHtml(versions : IDictionary.[int,IEnumerable.[Line]]) : void
  {
    def title = versions.First().Value.OfType.[Line.Lyric]().First().Text;
    def style =
@"
<style type='text/css'>
h1 {font-size: 14pt}
body {font-size: 12pt}
span.chord {font-family:lucida console, courier new, courier; color:blue}
span.lyric {font-family:lucida console, courier new, courier;}
h1 {font-family:verdana, helvetica; font-size: 14pt}
</style>
";
    Console.WriteLine($"<html><head><title>$title</title>$style</head><body>");
    foreach(pair in versions)
    {
      titleSuffix = match(pair.Key)
      {
        | 0 => ""
        | s when s < 0 => "(Capo + " + -pair.Key + ")"
        | s when s > 0 => "(Drop " + -pair.Key + ")"
      }
      OutputHtmlLines(pair.Value);
    }
    Console.WriteLine("</body></html>");
  }
  
  OutputHtmlLines(lines : IEnumerable.[Line]) : void
  {
    mutable prevLine : Line = null;
    foreach(line in lines)
    {
      OutputLine(line, prevLine);
      prevLine = line;
    }
  }
  
  mutable titleSuffix : string;
  
  OutputLine(line : Line, prevLine : Line) : void
  {
    Console.WriteLine(DescribeLine(line, prevLine));
  }
  
  DescribeLine(line : Line, prevLine : Line) : string
  {
    def text = HtmlEncode(line.Text);
    match(line, prevLine)
    {
      | (Line.Chords, _)                 => $"<span class='chord'>$text</span><br/>"
      | (Line.Lyric, Line.Chords)
      | (Line.Lyric, Line.Lyric)         => $"<span class='lyric'>$text</span><br/>"
      | (Line.Lyric, null)               => $"<h1>$text $titleSuffix</h1>"
      | (Line.Lyric, _)                  => $"<h3>$text</h3>"
      | (Line.Separator, Line.Separator) => ""
      | (Line.Separator, _)              => "<br/>"
    }
  }
  
  static HtmlEncode(text : string) : string
  {
    text.Replace(" ", "&nbsp;")
  }
  
}